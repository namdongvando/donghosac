//function loadConfig(e) {do if (Array.isArray(e.value)){ path += e.key + "/"; for (var t = 0; t < e.value.length; t++)loadConfig(e.value[t]), path = path.replace(e.value[t].key + "/", "") } else { var a = { key: path + e.key + "/" + e.key + ".html", value: { key: "authorize", value: e.value } }; Paths.push(a) } while (Array.isArray(e)) } function changePathToHtml(e) { for (var t = 0; t < e.length; t++) { for (var a = t + 1; a < e.length; a++) { var l = e[t].key.split("/"), r = e[a].key.split("/"); if (l.length == r.length && l[l.length - 1] == r[r.length - 1] && alert("Bạn đã nhập sai đường dẫn: " + e[t].key), l.length < r.length) for (var n = 0; n < r.length; n++)l[l.length - 1] == r[n] && alert("Bạn đã nhập sai đường dẫn: " + e[t].key); else for (var n = 0; n < l.length; n++)r[r.length - 1] == l[n] && alert("Bạn đã nhập sai đường dẫn: " + e[a].key) } updateTreeHtml(e[t]) } } function updateTreeHtml(e) { for (var t = e.key.split("/"), a = 0; a < t.length; a++)if (!checkObjectInHtml(html, t[a])) if (a < t.length - 1) { var l = { key: t[a], value: [] }; updateElementTreeHtml(html, t[a - 1], l) } else { var l = { key: t[a], value: e.value }; updateElementTreeHtml(html, t[a - 1], l) } } function checkObjectInHtml(e, t) { if (e.key == t) return !0; if (Array.isArray(e.value)) { for (var a = 0; a < e.value.length; a++)if (checkObjectInHtml(e.value[a], t)) return !0; return !1 } } function updateElementTreeHtml(e, t, a) { do if (Array.isArray(e.value)) if (e.key == t) e.value.push(a); else for (var l = 0; l < e.value.length; l++)updateElementTreeHtml(e.value[l], t, a); while (Array.isArray(e)) } function loadAgbx(e, t) { e.value.value && (t = t.charAt(0).toUpperCase() + t.slice(1), document.write('<link href="' + e.key.replace(".html", ".css") + '" rel="stylesheet" />'), document.write('<script src="' + e.key.replace(".html", "Library.js") + '"></script>'), document.write('<script src="' + e.key.replace(".html", "Services.js") + '"></script>'), document.write('<script src="' + e.key.replace(".html", "Filter.js") + '"></script>'), document.write('<script src="' + e.key.replace(".html", "Controller.js") + '"></script>'), document.write('<script>app.directive("bakco' + t + '", function () {return {restrict: "CAE",controller: "' + t.toLowerCase() + 'Controller",templateUrl: "' + e.key + '"}});</script>'))}var app = angular.module("rootApp", ["ngRoute"]), html = {key:"root", value:[{key:"header", value:[{key:"bkheaderleft", value:!0}, {key:"account", value:[{key:"account", value:!0}]}]}, {key:"main", value:[{key:"schedule", value:!0}, {key:"keywords", value:!0}]}]}, path = ""; Paths = [], changePathToHtml(sysPath), loadConfig(html), path = location.href; for (var i = 0; i < Paths.length; i++){var agbx = Paths[i].key.replace(".html", "").split("/").pop(); switch (agbx){case"right":break; case"admin":break; case"supper":break; default:loadAgbx(Paths[i], agbx)}}


function loadFile4Path(t) {
    var timeRandom = Math.floor(Date.now() / 1000);
    var p = "/" + t.Key + "/" + t.Name + ".html";
    var ND = t.Name.charAt(0).toUpperCase() + t.Name.slice(1);
    document.write('<script src="' + p.replace(".html", "Controller.js?v=" + timeRandom) + '"></script>');
    document.write('<script>app.directive("bakco' + ND + '", function () {return {restrict: "CAE",controller: "' + ND.toLowerCase() + 'Controller",templateUrl: "' + p + '"}});</script>');
}
var app = angular.module("rootApp", ["ngRoute"]);
for (x in sysPath) {
    loadFile4Path(sysPath[x]);
}
//for (z in temprootPath){
//var agbx = ((temprootPath[z].key.replace('.html', '')).split('/')).pop();
//        var lib = temprootPath[z].key + "/" + agbx + "Library.js";
//        document.write('<script src="' + lib + '"></script>');
//        console.log(lib);
//}